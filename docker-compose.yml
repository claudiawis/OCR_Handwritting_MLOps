version: "3.8"

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  back-tier:
  front-tier:

services:
  ingestion:
    build:
      context: .
      dockerfile: src/data/Dockerfile
    container_name: ingestion_service
    volumes:
      - ./data/raw:/app/data/raw
      - ./.dvc:/app/.dvc
      - ./.git:/app/.git
    command: ["dvc", "repro", "one_hot_encode_labels"]

  training:
    build:
      context: .
      dockerfile: src/models/Dockerfile
    container_name: training_service
    restart: on-failure  #  let the training service fail if the ingestion service has not completed and then restart it after the ingestion service finishes
    depends_on:
      - ingestion
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./.dvc:/app/.dvc
      - ./.git:/app/.git
    command: ["sh", "-c", "dvc repro --downstream setup_callbacks"]

  prediction:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    container_name: prediction_service
    depends_on:
      - training
    ports:
      - 8000:8000
    networks:
      - back-tier

  prometheus:
    image: prom/prometheus:v2.36.2
    container_name: prometheus_service
    volumes:
      - ./prometheus_data/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - cadvisor
    ports:
      - 9090:9090
    networks:
      - back-tier
    restart: always

  node-exporter:  # Collects system-level metrics about the host machine (e.g., CPU, memory, disk usage, and network activity)
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"'
    ports:
      - 9110:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  alertmanager:    # Handles alerts sent by Prometheus and routes them to various notification systems (e.g., email, Slack, or webhooks)
    image: prom/alertmanager
    container_name: alertmanager_service
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:   # Monitors Docker container metrics, such as CPU, memory, disk I/O, and network usage for each container.
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor_service
    volumes:
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys:/sys:ro
      - /var/run:/var/run:rw
    ports:
      - 8085:8085
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  grafana:
    image: grafana/grafana
    user: "472"
    container_name: grafana_service
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana_data/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana_data/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always
